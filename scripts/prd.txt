# 种子分类与异常检测POC项目产品需求文档

## 概述
本项目是一个概念验证(POC)，旨在开发一个智能种子分类系统。该系统能够识别公司生产的10种已知种子类型，同时检测出不属于这10种类型的外来种子。这是一个典型的Out-of-Distribution (OOD) 检测问题，需要在准确分类已知种子的同时，有效识别未知种子。

## 核心功能

### 1. 种子图像分类
- **功能描述**：对输入的种子图像进行分类，识别出属于公司生产的10种种子中的哪一种
- **重要性**：这是系统的核心功能，确保已知种子能够被准确分类
- **实现方式**：使用深度学习分类模型，基于卷积神经网络

### 2. 异常种子检测 (OOD Detection)
- **功能描述**：检测输入的种子图像是否属于外来种子（不在10种已知类别中）
- **重要性**：防止外来种子被错误分类，确保质量控制
- **实现方式**：使用OOD检测算法，如MSP、ODIN、Mahalanobis等

### 3. 置信度评估
- **功能描述**：为每个预测结果提供置信度分数
- **重要性**：帮助用户判断预测结果的可靠性
- **实现方式**：基于模型输出的概率分布计算置信度

### 4. 批量处理
- **功能描述**：支持批量处理多张种子图像
- **重要性**：提高生产效率，满足实际应用需求
- **实现方式**：批处理管道，支持文件夹输入

## 用户体验

### 用户角色
- **质检员**：使用系统进行日常种子质量检测
- **技术人员**：负责系统维护和参数调整
- **管理人员**：查看检测统计报告

### 核心用户流程
1. **单张图像检测**：上传种子图像 → 获得分类结果和置信度 → 查看是否为外来种子
2. **批量检测**：上传图像文件夹 → 批量处理 → 导出检测报告
3. **结果审核**：查看低置信度结果 → 人工确认 → 更新训练数据

### UI/UX考虑
- 简洁直观的界面设计
- 清晰的结果展示（分类结果、置信度、OOD标识）
- 支持图像预览和放大查看
- 批量结果的表格展示和导出功能

## 技术架构

### 系统组件
1. **数据预处理模块**
   - 图像标准化和增强
   - 数据加载和批处理

2. **分类模型**
   - 基于ResNet/EfficientNet的分类网络
   - 针对10种种子类型进行训练

3. **OOD检测模块**
   - 多种OOD检测算法实现
   - 阈值自适应调整

4. **后处理模块**
   - 置信度计算
   - 结果格式化和输出

### 数据模型
- **种子类别**：10种已知种子类型的标签映射
- **图像数据**：标准化的种子图像（224x224 RGB）
- **检测结果**：包含类别、置信度、OOD标识的结构化输出

### API设计
- `/predict`：单张图像预测接口
- `/batch_predict`：批量预测接口
- `/health`：系统健康检查接口

### 基础设施要求
- GPU支持（CUDA）用于模型推理
- 足够的存储空间用于模型和数据
- Python 3.8+ 环境
- PyTorch/TensorFlow深度学习框架

## 开发路线图

### MVP阶段
1. **数据准备和预处理**
   - 收集和整理10种种子的训练数据
   - 实现数据加载和预处理管道
   - 数据增强策略

2. **基础分类模型**
   - 实现基于ResNet的分类模型
   - 训练10类种子分类器
   - 模型评估和优化

3. **OOD检测集成**
   - 集成MSP、ODIN等OOD检测方法
   - 在测试数据上评估OOD检测性能
   - 阈值调优

4. **简单推理接口**
   - 实现单张图像预测功能
   - 基本的结果输出格式

### 增强阶段
1. **多种OOD方法对比**
   - 实现更多OOD检测算法
   - 性能对比和最优方法选择

2. **批量处理功能**
   - 批量预测管道
   - 结果导出功能

3. **Web界面开发**
   - 用户友好的Web界面
   - 图像上传和结果展示

4. **性能优化**
   - 模型量化和加速
   - 推理时间优化

## 逻辑依赖链

### 基础依赖（必须首先完成）
1. **环境搭建**：配置OpenOOD环境和依赖
2. **数据准备**：收集和预处理种子数据集
3. **基础分类模型**：训练能够区分10种种子的分类器

### 核心功能开发
1. **OOD检测集成**：在分类模型基础上添加OOD检测
2. **推理管道**：整合分类和OOD检测的完整推理流程
3. **结果后处理**：格式化输出和置信度计算

### 用户界面和体验
1. **API接口**：提供程序化访问接口
2. **批量处理**：支持生产环境的批量需求
3. **Web界面**：提供用户友好的交互界面

## 风险和缓解措施

### 技术挑战
- **数据不平衡**：某些种子类型的样本可能较少
  - 缓解：数据增强、类别权重调整
- **OOD检测准确性**：外来种子可能与已知种子相似
  - 缓解：多种OOD方法集成、阈值优化
- **模型泛化能力**：不同拍摄条件下的性能
  - 缓解：数据增强、域适应技术

### MVP范围控制
- 专注于核心功能实现，界面可以简化
- 优先保证检测准确性，性能优化可后续进行
- 使用现有的OpenOOD框架，减少重复开发

### 资源约束
- 利用预训练模型减少训练时间
- 使用OpenOOD现有的OOD检测实现
- 分阶段开发，确保每个阶段都有可用的原型

## 技术规范

### 开发框架
- **深度学习框架**：PyTorch
- **OOD检测库**：OpenOOD
- **图像处理**：OpenCV, PIL
- **Web框架**：Flask/FastAPI（如需要）

### 数据格式
- **输入**：JPEG/PNG格式的种子图像
- **输出**：JSON格式，包含类别、置信度、OOD标识

### 性能指标
- **分类准确率**：>95%（10种已知种子）
- **OOD检测**：AUROC >90%
- **推理速度**：<1秒/张（单张图像）

## 附录

### 相关研究
- Out-of-Distribution检测最新进展
- 农业图像分类应用案例
- OpenOOD框架使用指南

### 数据收集计划
- 每种种子至少1000张训练图像
- 多种拍摄角度和光照条件
- 外来种子样本用于OOD测试 